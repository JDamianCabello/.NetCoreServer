<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CallCenterServer</name>
    </assembly>
    <members>
        <member name="T:CallCenterServer.Migrations.InitialCreate">
            <summary>
            Migration to set up our database and tables. 
            To create this migration use: Update-Database in the VS console
            To remove this migration use: remove-migration in VS console
            </summary>
        </member>
        <member name="M:CallCenterServer.Migrations.InitialCreate.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <summary>
            The Up method contains C# code that applies any changes made to the model to the schema of the database since the last migration was generated.
            </summary>
            <param name="migrationBuilder">A builder providing a fluentish API for building MigrationOperations</param>
        </member>
        <member name="M:CallCenterServer.Migrations.InitialCreate.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <summary>
            The Down method reverses those changes, restoring the database to the state of the previous migration.
            </summary>
            <param name="migrationBuilder">A builder providing a fluentish API for building MigrationOperations</param>
        </member>
        <member name="M:CallCenterServer.Migrations.InitialCreate.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Method to make database migration if not exist
            </summary>
            <param name="modelBuilder">A builder providing a fluentish API for building MigrationOperations</param>
        </member>
        <member name="T:CallCenterServer.SQLiteDBContext">
            <summary>
            Represents a combination of the Unit Of Work and Repository patterns such that it can be used to query from a database and group together changes that will then be written back to the store as a unit.
            </summary>
        </member>
        <member name="P:CallCenterServer.SQLiteDBContext.Users">
            <summary>
            Represents an entity set that can be used for create, read, update, and delete operations. 
            </summary>
        </member>
        <member name="M:CallCenterServer.SQLiteDBContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)">
            <summary>
            Create the Database config, here is the database name
            </summary>
            <param name="options"></param>
        </member>
        <member name="T:CallCenterServer.SqLiteOperator">
            <summary>
            Util class to manage database operations
            </summary>
        </member>
        <member name="M:CallCenterServer.SqLiteOperator.CreateNewUser(SharedNameSpace.User)">
            <summary>
            Makes a new user entry in database
            </summary>
            <param name="u">The new user</param>
        </member>
        <member name="M:CallCenterServer.SqLiteOperator.UpdateUser(SharedNameSpace.User)">
            <summary>
            Update a exist user
            </summary>
            <param name="u"></param>
        </member>
        <member name="M:CallCenterServer.SqLiteOperator.FindUser(System.String)">
            <summary>
            Find if exist the user in the database
            </summary>
            <param name="userID">User unique id</param>
            <returns>User if exist or null if don't exist</returns>
        </member>
        <member name="M:CallCenterServer.SqLiteOperator.ValidateLogin(SharedNameSpace.User)">
            <summary>
            Validate if the current id and name exist in the database
            </summary>
            <param name="user">The current user triying to login</param>
            <returns></returns>
        </member>
        <member name="M:CallCenterServer.SqLiteOperator.GetAllUsers">
            <summary>
            Get all database users order by name
            </summary>
            <returns></returns>
        </member>
        <member name="T:CallCenterServer.Server.ErrorDelegate">
            <summary>
            Delegates that show server errors in console when they appears
            </summary>
            <param name="error">Error id</param>
        </member>
        <member name="M:CallCenterServer.Server.StartServer(CallCenterServer.Server.ErrorDelegate,CallCenterServer.Server.ShowConsoleLog)">
            <summary>
            Server start point
            </summary>
            <param name="errorDelegate">Method that will handle the errors in other side (Program.cs)</param>
            <param name="showConsoleLog">Method that will show the console log in other side (Program.cs)</param>
        </member>
        <member name="M:CallCenterServer.Server.StopServer">
            <summary>
            Not totally implemented at the moment. Just for test purposes
            </summary>
        </member>
        <member name="M:CallCenterServer.Server.ConnectecUsers">
            <summary>
            Debbug method that show online users in server
            </summary>
            <returns>A users online list</returns>
        </member>
        <member name="M:CallCenterServer.Server.Listen">
            <summary>
            Ready to accept connection from clients
            </summary>
        </member>
        <member name="M:CallCenterServer.Server.ListenClient(System.Object)">
            <summary>
            Listen to client
            </summary>
            <param name="o">Socket client</param>
        </member>
        <member name="M:CallCenterServer.Server.GetCurrentUserBySocket(System.Net.Sockets.Socket,System.Boolean)">
            <summary>
            Method to get the current User based on the socket
            </summary>
            <param name="userSocket">Client socket</param>
            <param name="isAdmin">To evaluate what list should use</param>
            <returns></returns>
        </member>
        <member name="M:CallCenterServer.Server.SendUserUpdateToAdmin(SharedNameSpace.User)">
            <summary>
            Send a new connection update to all admins clients
            </summary>
            <param name="u">New Logged user</param>
        </member>
        <member name="M:CallCenterServer.Server.SendLogoutToAdmin(SharedNameSpace.User)">
            <summary>
            Method to update admin users control. Send one ClientLogout to update UI
            </summary>
            <param name="u">User disconnected</param>
        </member>
        <member name="M:CallCenterServer.Server.SendUserList(SharedNameSpace.User)">
            <summary>
            When admin open the tool for first time the method send one array with the actual online users
            </summary>
            <param name="u">Admin user logged</param>
        </member>
        <member name="M:CallCenterServer.Server.BroadCastMessageAllClients(SharedNameSpace.ServerResponse)">
            <summary>
            Send a object to all users connected
            </summary>
            <param name="response">Response fron the server that contains the message</param>
        </member>
        <member name="M:CallCenterServer.Server.SendMessageToClient(SharedNameSpace.AdminOrder)">
            <summary>
            Send a message to the destinatary
            </summary>
            <param name="m">Message to send</param>
        </member>
        <member name="M:CallCenterServer.Server.SendCall(SharedNameSpace.Call)">
            <summary>
            Send a call to the destinatary
            </summary>
            <param name="call">The incomming call</param>
        </member>
        <member name="M:CallCenterServer.Server.SendEndCall(SharedNameSpace.EndCall)">
            <summary>
            Send the endcall to client
            </summary>
            <param name="endCall">The endcall with the user to send it</param>
        </member>
        <member name="M:CallCenterServer.Server.Logout(SharedNameSpace.AdminOrder)">
            <summary>
            Get client Logout signal and dispose the resources
            </summary>
            <param name="aOrder">AdminOrder</param>
        </member>
        <member name="M:CallCenterServer.Server.Send(System.Net.Sockets.Socket,System.Object)">
            <summary>
            Send a object to the client
            </summary>
            <param name="s">Socket client</param>
            <param name="o">Object to send</param>
        </member>
        <member name="M:CallCenterServer.Server.Receive(System.Net.Sockets.Socket)">
            <summary>
            Receive all the serialized object
            </summary>
            <param name="s">Socket that receive the object</param>
            <returns>Object received from client</returns>
        </member>
        <member name="M:CallCenterServer.ServerLog.WriteToConnections(SharedNameSpace.User,System.String,CallCenterServer.ConnectionAction)">
            <summary>
            Write all uses connections to Connection log file
            </summary>
            <param name="u">Current logged user</param>
            <param name="userIp">User IP</param>
            <param name="action">User action</param>
        </member>
        <member name="M:CallCenterServer.ServerLog.WriteToConsole(System.String)">
            <summary>
            Write all console output to log
            </summary>
            <param name="message">Log message</param> to save
        </member>
        <member name="M:CallCenterServer.ServerLog.WriteToExceptions(System.Exception)">
            <summary>
            Write all exceptions to Exception log file
            </summary>
            <param name="e">Exception</param>
        </member>
        <member name="M:CallCenterServer.ServerLog.CheckIfExistConnectionsLogsFolder">
            <summary>
            Makes the conection log folder. IF log folder dont exist will create it too.
            </summary>
        </member>
        <member name="M:CallCenterServer.ServerLog.CheckIfExistConsoleLogsFolder">
            <summary>
            Makes the console log folder. IF log folder dont exist will create it too.
            </summary>
        </member>
        <member name="M:CallCenterServer.ServerLog.CheckIfExistLogFolder">
            <summary>
            IF log folder dont exist will create it.
            </summary>
        </member>
        <member name="M:CallCenterServer.ServerLog.CheckIfExistExceptionsLogFolder">
            <summary>
            Makes the exception log folder. IF log folder dont exist will create it too.
            </summary>
        </member>
        <member name="M:CallCenterServer.ServerLog.FormatException(System.Exception)">
             <summary>
             Format the exception info for write into log file
             
             Output example:
             
             2020-09-14 11:25:42-1305
             TYPE: :System.FormatException
             STACK TRACE:    at System.Net.IPAddressParser.Parse(ReadOnlySpan`1 ipSpan, Boolean tryParse)
              at System.Net.IPAddress.Parse(String ipString)
              at CallCenterServer.Server.StartServer(ErrorDelegate errorDelegate) in C:\Users\PTV\source\repos\CallCenterServer\CallCenterServer\Server\Server.cs:line 63
            SOURCE: System.Net.Primitives
            TARGET SITE: System.Net.IPAddress Parse(System.ReadOnlySpan`1[System.Char], Boolean)
            INNER EXCEPTION: System.Net.Sockets.SocketException(10022): Se ha proporcionado un argumento no válido.
            MESSAGE: An invalid IP address was specified.
            ADDITIONAL DATA: System.Collections.ListDictionaryInternal
            =======================================================================================================
             </summary>
             <param name="exception">The exception info</param>
             <returns>Formated string</returns>
        </member>
        <member name="M:CallCenterServer.ServerLog.FormatConnection(SharedNameSpace.User,System.String,CallCenterServer.ConnectionAction)">
            <summary>
            Format the user info for write into log file
            
            Output examples:
            2020-09-15 08:23:16-6185	damian | damian |  Admin user
            2020-09-15 08:55:38-1452	ADMIN | ADMIN |  Admin user
            2020-09-15 09:52:21-8996	asd | asd |  Normal user
            
            </summary>
            <param name="user">User into for make a string to log file</param>
            <param name="userIp">User IP</param>
            <param name="action">User Action</param>
            <returns>Formated string with user info</returns>
        </member>
        <member name="T:CallCenterServer.Utils.Constants">
            <summary>
            All app constants here
            </summary>
        </member>
        <member name="F:CallCenterServer.Utils.Constants.CONFIG_FILE_DATA">
            <summary>
            Config.json.example 
            
            if dont exist server will ask to make it and will take from the template
            </summary>
        </member>
        <member name="T:SharedNameSpace.OrderType">
            <summary>
            Type of order
            </summary>
        </member>
        <member name="T:SharedNameSpace.DatabaseAction">
            <summary>
            CRUD Database actions
            </summary>
        </member>
        <member name="M:SharedNameSpace.Call.#ctor(SharedNameSpace.User,System.String,System.String,System.String,System.Int32)">
            <summary>
            Crea un objeto Call
            </summary>
            <param name="to">Usuario al que va dirijida la llamada</param>
            <param name="number">Número de telefono de la llamada</param>
            <param name="campaigne">Campania de la llamada</param>
            <param name="callid">Id de la llamada [Este campo se puso porque era necesario para vocalcom]</param>
            <param name="indice">Indice de la llamada [Este campo se puso porque era necesario para vocalcom]</param>
        </member>
        <member name="T:SharedNameSpace.EndCall">
            <summary>
            Model to end call
            </summary>
        </member>
        <member name="M:SharedNameSpace.User.Equals(System.Object)">
            <summary>
            Return if user is equal to other user
            </summary>
            <param name="obj">Object to compare</param>
            <returns></returns>
        </member>
        <member name="M:SharedNameSpace.User.op_Equality(System.Object,SharedNameSpace.User)">
            <summary>
            Returns if user is equals to object
            </summary>
            <param name="o">An object</param>
            <param name="u">User to compare</param>
            <returns></returns>
        </member>
        <member name="M:SharedNameSpace.User.op_Inequality(System.Object,SharedNameSpace.User)">
            <summary>
            Returns if user isn't equals to object
            </summary>
            <param name="o">An object</param>
            <param name="u">User to compare</param>
            <returns></returns>
        </member>
        <member name="M:SharedNameSpace.User.GetHashCode">
            <summary>
            Set user hash code
            </summary>
            <returns>The unique user hash code</returns>
        </member>
        <member name="T:Serialization.BinarySerialization">
            <summary>
            Class to Serialize/Deserialize objects
            
            All server getting and sender are serializated so need this class
            </summary>
        </member>
        <member name="M:Serialization.BinarySerialization.Serializate(System.Object)">
            <summary>
            Serializate a object from memory
            </summary>
            <param name="toSerializate">Object to serilize</param>
            <returns></returns>
        </member>
        <member name="M:Serialization.BinarySerialization.Deserializate(System.Byte[])">
            <summary>
            Deserializate a byte array into object
            </summary>
            <param name="data">Serializate data array</param>
            <returns></returns>
        </member>
        <member name="T:Serialization.CurrentAssemblyDeserializationBinder">
            <summary>
            Change the actual executing assambly for deserializate objects from other clients. If don´t have this will thrown SerializationError
            </summary>
        </member>
    </members>
</doc>
